name: "IGListKit CI"

on: 
  push:
    branches:
      - main 
      - master
  pull_request:
    branches: 
      - '*'

jobs:
  macOS:
    name: Unit Test macOS
    runs-on: macos-11
    env: 
      DEVELOPER_DIR: /Applications/Xcode_13.0.app
      WORKSPACE_NAME: IGListKit.xcworkspace
      SCHEME_NAME: IGListKit-macOS
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache RubyGems
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install ruby gems.
        run: bundle install

      - name: Install pods.
        run: pod install

      - name: Run unit tests for macOS
        run: |
          set -o pipefail
          xcodebuild build build-for-testing -workspace "${{ env.WORKSPACE_NAME }}" -scheme "${{ env.SCHEME_NAME }}" -destination "platform=macOS" -configuration Debug ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=YES GCC_GENERATE_TEST_COVERAGE_FILES=YES ONLY_ACTIVE_ARCH=YES | bundle exec xcpretty -c
          xcodebuild analyze test-without-building -workspace "${{ env.WORKSPACE_NAME }}" -scheme "${{ env.SCHEME_NAME }}" -destination "platform=macOS" -configuration Debug ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=YES GCC_GENERATE_TEST_COVERAGE_FILES=YES ONLY_ACTIVE_ARCH=YES | bundle exec xcpretty -c

  iOS:
    name: Unit Test iOS 
    runs-on: macos-11
    env: 
      DEVELOPER_DIR: /Applications/Xcode_13.0.app
      WORKSPACE_NAME: IGListKit.xcworkspace
      SCHEME_NAME: IGListKit
    strategy:
      matrix:
        destination: ["name=iPhone 12 Pro"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache RubyGems
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install ruby gems.
        run: bundle install

      - name: Install pods.
        run: pod install

      - name: iOS - ${{ matrix.destination }}
        run: |
          set -o pipefail
          xcodebuild build build-for-testing -workspace "${{ env.WORKSPACE_NAME }}" -scheme "${{ env.SCHEME_NAME }}" -destination "${{ matrix.destination }}" -configuration Debug ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=YES GCC_GENERATE_TEST_COVERAGE_FILES=YES ONLY_ACTIVE_ARCH=YES | bundle exec xcpretty -c
          xcodebuild analyze test-without-building -workspace "${{ env.WORKSPACE_NAME }}" -scheme "${{ env.SCHEME_NAME }}" -destination "${{ matrix.destination }}" -configuration Debug ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=YES GCC_GENERATE_TEST_COVERAGE_FILES=YES ONLY_ACTIVE_ARCH=YES | bundle exec xcpretty -c

  Cocoapods:
    name: Cocoapods Lint 
    runs-on: macos-11
    env: 
      DEVELOPER_DIR: /Applications/Xcode_13.0.app
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache RubyGems
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install ruby gems.
        run: bundle install

      - name: Run IGListDiffKit podspec lint
        run: bundle exec pod lib lint IGListDiffKit.podspec --allow-warnings

      - name: Run IGListKit podspec lint
        run: bundle exec pod lib lint IGListKit.podspec --allow-warnings "--include-podspecs=IGListDiffKit.podspec"

      - name: Run IGListSwiftKit podspec lint
        run: bundle exec pod lib lint IGListSwiftKit.podspec --allow-warnings "--include-podspecs=*.podspec"

  SPM-build-from-Package:
    name: Verify SPM build by invoking `xcodebuild` on Package.swift
    runs-on: macos-11
    env: 
      DEVELOPER_DIR: /Applications/Xcode_13.0.app
      WORKSPACE_NAME: IGListKit.xcworkspace
      PROJECT_NAME: IGListKit.xcodeproj
      IOS_DESTINATION: "name=iPhone 12 Pro"
    strategy:
      matrix:
        schemeName: ["IGListDiffKit",
                      "IGListKit",
                      "IGListSwiftKit"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Clean project's ${{ env.PROJECT_NAME }} and ${{ env.WORKSPACE_NAME }}
        run: |
          rm -rf "${{ env.WORKSPACE_NAME }}"
          rm -rf "${{ env.PROJECT_NAME }}"

      - name: Run ${{ matrix.schemeName}} using Package.swift
        run: xcodebuild -scheme "${{ matrix.schemeName}}" build -destination "${{ env.IOS_DESTINATION }}" | xcpretty

  Carthage-XCFramework:
    name: Verify Carthage build XCFramework 
    runs-on: macos-11
    env: 
      DEVELOPER_DIR: /Applications/Xcode_13.0.app
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Carthage build framework
        run: carthage build --no-skip-current --use-xcframeworks

  Carthage-Legacy-Lipo-Binaries:
    name: Verify Carthage build lipo binaries 
    runs-on: macos-11
    env: 
      DEVELOPER_DIR: /Applications/Xcode_11.7.app
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Carthage build framework
        run: carthage build --no-skip-current

  Build-Examples:
    name: Build Examples and UI tests.
    runs-on: macos-10.15
    env: 
      DEVELOPER_DIR: /Applications/Xcode_12.4.app
      IOS_EXAMPLE_XCODEPROJ: Examples/Examples-iOS/IGListKitExamples.xcodeproj
      TVOS_EXAMPLE_XCODEPROJ: Examples/Examples-tvOS/IGListKitExamples.xcodeproj
      MACOS_EXAMPLE_XCODEPROJ: Examples/Examples-macOS/IGListKitExamples.xcodeproj
      EXAMPLE_SCHEME: IGListKitExamples
    strategy:
      matrix:
        iosDestination: ["name=iPhone 12 Pro"]
        tvOSDestination: ["name=Apple TV 4K"]
        macOSDestination: ["platform=macOS"]
        macCatalystDestination: ["platform=macOS,variant=Mac Catalyst"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache RubyGems
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install ruby gems.
        run: bundle install
        
      - name: Build iOS Example - ${{ matrix.iosDestination }}
        run: |
          set -o pipefail
          xcodebuild build -project "${{ env.IOS_EXAMPLE_XCODEPROJ }}" -scheme "${{ env.EXAMPLE_SCHEME }}" -destination "${{ matrix.iosDestination }}" ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO | bundle exec xcpretty -c

      - name: Run iOS Example's UI Tests - ${{ matrix.iosDestination }}
        run: |
          set -o pipefail
          xcodebuild build test -project "${{ env.IOS_EXAMPLE_XCODEPROJ }}" -scheme "${{ env.EXAMPLE_SCHEME }}" -destination "${{ matrix.iosDestination }}" -configuration Debug ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO | bundle exec xcpretty -c

      - name: Build tvOS Example - ${{ matrix.tvOSDestination }}
        run: |
          set -o pipefail
          xcodebuild build -project "${{ env.TVOS_EXAMPLE_XCODEPROJ }}" -scheme "${{ env.EXAMPLE_SCHEME }}" -destination "${{ matrix.tvOSDestination }}" ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO | bundle exec xcpretty -c

      - name: Build macOS Example - ${{ matrix.macOSDestination }}
        run: |
          set -o pipefail
          xcodebuild build -project "${{ env.MACOS_EXAMPLE_XCODEPROJ }}" -scheme "${{ env.EXAMPLE_SCHEME }}" -destination "${{ matrix.macOSDestination }}" ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO | bundle exec xcpretty -c

      - name: Build macCatalyst Example - ${{ matrix.macCatalystDestination }}
        run: |
          set -o pipefail
          xcodebuild build -project "${{ env.IOS_EXAMPLE_XCODEPROJ }}" -scheme "${{ env.EXAMPLE_SCHEME }}" -destination "${{ matrix.macCatalystDestination }}" ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO | bundle exec xcpretty -c
